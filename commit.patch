diff --git a/Makefile b/Makefile
index b971308..1f68a81 100644
--- a/Makefile
+++ b/Makefile
@@ -157,6 +157,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_sleep\
+	$U/_pingpong\
+	$U/_find\
 
 
 ifeq ($(LAB),syscall)
@@ -242,15 +245,8 @@ qemu-gdb: $K/kernel .gdbinit fs.img
 	@echo "*** Now run 'gdb' in another window." 1>&2
 	$(QEMU) $(QEMUOPTS) -S $(QEMUGDB)
 
-GDBARGS = 
-GDBARGS += -ex 'set architecture riscv:rv64'
-GDBARGS += -ex 'target remote 127.0.0.1:$(GDBPORT)'
-GDBARGS += -ex 'symbol-file kernel/kernel'
-GDBARGS += -ex 'set riscv use-compressed-breakpoints yes'
-
-
 gdb: 
-	$(GDB) $(GDBARGS)
+	$(GDB)
 
 ##
 ##  FOR testing lab grading script
diff --git a/commands.gdb b/commands.gdb
new file mode 100644
index 0000000..385166d
--- /dev/null
+++ b/commands.gdb
@@ -0,0 +1,6 @@
+b trap.c:55
+c
+p p->name
+n
+p p->name
+da
\ No newline at end of file
diff --git a/user/find.c b/user/find.c
new file mode 100644
index 0000000..a7f5e1b
--- /dev/null
+++ b/user/find.c
@@ -0,0 +1,91 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+
+char *fmtname(char *path) {
+  static char buf[DIRSIZ + 1];
+  char *p;
+
+  // Find first character after last slash.
+  for (p = path + strlen(path); p >= path && *p != '/'; p--)
+    ;
+  p++;
+
+  // Return blank-padded name.
+  if (strlen(p) >= DIRSIZ) return p;
+  memmove(buf, p, strlen(p));
+  memset(buf + strlen(p), '\0', DIRSIZ - strlen(p));
+  //buf[strlen(buf) + strlen(p)]='\0';
+  return buf;
+}
+
+void find(char *path, char *target) {
+  char buf[512], *p;
+  int fd;
+  struct dirent de;
+  struct stat st;
+
+  if ((fd = open(path, 0)) < 0) {
+    fprintf(2, "find: cannot open %s\n", path);
+    return;
+  }
+
+  if (fstat(fd, &st) < 0) {
+    fprintf(2, "find: cannot stat %s\n", path);
+    close(fd);
+    return;
+  }
+
+
+  char *filename;
+  filename = fmtname(path);
+  // printf("%s\n", path);
+  // printf("%s\n", filename);
+  // printf("%s\n", target);
+  //printf("%d\n",strcmp(filename, target));
+  if (strcmp(filename, target) == 0) // WHY32?
+        printf("%s\n", path); 
+        
+  switch (st.type) {
+
+    case T_FILE:
+      close(fd);
+      break; 
+
+    case T_DIR:
+      if (strlen(path) + 1 + DIRSIZ + 1 > sizeof(buf)) {
+        printf("find: path too long\n");
+        break;
+      }
+      memset(buf, 0, sizeof(buf));
+      strcpy(buf, path);
+      p = buf + strlen(buf);
+      *p++ = '/';
+      while (read(fd, &de, sizeof(de)) == sizeof(de)) {
+        if (de.inum == 0||strcmp(de.name, ".") == 0 || strcmp(de.name, "..") == 0)
+          continue;
+        memcpy(p, de.name, DIRSIZ);
+        p[DIRSIZ] = 0;
+
+      find(buf, target);
+      }
+      break; 
+  }
+
+  close(fd);
+}
+
+
+
+int main(int argc, char *argv[]) {
+  if (argc != 3) {
+    fprintf(2, "format: find <path> <name>\n");
+    exit(1);
+  }
+  find(argv[1], argv[2]);
+  exit(0);
+}
+
+
+
diff --git a/user/pingpong.c b/user/pingpong.c
new file mode 100644
index 0000000..8504c22
--- /dev/null
+++ b/user/pingpong.c
@@ -0,0 +1,36 @@
+#include "kernel/types.h"
+#include "user.h"
+
+int main(int argc, char* argv[]) {
+
+
+    int c2f[2]; 
+    int f2c[2]; 
+    pipe(c2f);
+    pipe(f2c);
+    char buf[50];
+
+    if (fork() == 0) { 
+        char pid_c[10];
+        itoa(getpid(),pid_c);
+        close(f2c[1]); 
+        close(c2f[0]); 
+        read(f2c[0], buf, sizeof(buf));
+        close(f2c[0]);
+        printf("%d: received ping from pid %d\n", getpid(), atoi(buf));
+        write(c2f[1], pid_c, strlen(pid_c) + 1);
+        close(c2f[1]);
+    } else { //父线程
+        close(f2c[0]); 
+        close(c2f[1]); 
+        char pid_f[10];
+        itoa(getpid(),pid_f);//字符串类型
+        write(f2c[1], pid_f, strlen(pid_f) + 1);
+        close(f2c[1]);
+        read(c2f[0], buf, sizeof(buf));
+        close(c2f[0]);
+        printf("%d: received pong from pid %d\n", getpid(), atoi(buf));
+    }
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/sleep.c b/user/sleep.c
new file mode 100644
index 0000000..45811c4
--- /dev/null
+++ b/user/sleep.c
@@ -0,0 +1,13 @@
+#include "kernel/types.h"
+#include "user.h"
+
+int main(int argc, char* argv[]) {
+    if (argc != 2) {
+        printf("Sleep needs one argument!\n"); // 检查参数数量是否正确
+        exit(-1);
+    }
+    int ticks = atoi(argv[1]); // 将字符串参数转换为整数
+    sleep(ticks); // 使用系统调用sleep
+    printf("(nothing happens for a little while)\n");
+    exit(0); // 确保进程退出
+}
\ No newline at end of file
